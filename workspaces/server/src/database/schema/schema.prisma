datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model UserDB {
    id        Int          @id @default(autoincrement())
    email     String       @unique
    password  String
    username  String
    name      String?
    lastname  String?
    genre     String?
    avatar    String?
    active    Boolean      @default(false)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt()
    artists   ArtistDB[]
    labels    LabelDB[]
    favorites FavoriteDB[]

    @@map("User")
}

model ArtistDB {
    id        Int       @id
    name      String
    profile   String
    artwork   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    users     UserDB[]
    tracks    TrackDB[] @relation("artists")
    remixs    TrackDB[] @relation("remixers")

    @@map("Artist")
}

model LabelDB {
    id        Int       @id
    name      String
    profile   String
    artwork   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    users     UserDB[]
    tracks    TrackDB[]

    @@map("Label")
}

model TrackDB {
    id        Int          @id
    bpm       Int
    released  DateTime
    artwork   String
    key       String
    mix       String
    name      String
    preview   String
    favorite  FavoriteDB[]
    artists   ArtistDB[]   @relation("artists")
    remixers  ArtistDB[]   @relation("remixers")
    genre     GenreDB?     @relation(fields: [genreId], references: [id])
    genreId   Int?
    label     LabelDB?     @relation(fields: [labelId], references: [id])
    labelId   Int?
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    @@map("Track")
}

model FavoriteDB {
    id        Int      @id @default(autoincrement())
    user      UserDB   @relation(fields: [userId], references: [id])
    userId    Int
    track     TrackDB  @relation(fields: [trackId], references: [id])
    trackId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("Favorite")
}

model GenreDB {
    id     Int       @id
    name   String
    slug   String
    tracks TrackDB[]

    @@map("Genre")
}
